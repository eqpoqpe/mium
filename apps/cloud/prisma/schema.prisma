generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(cuid())
  date      DateTime    @default(now())
  only_key  String
  password  String
  salt      String
  email     String      @unique
  UserInfos UserInfos[]
  accounts  Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model UserInfos {
  token   String   @id @default(uuid())
  owner   User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  date    DateTime @default(now())
  ownerId String
  name    String?
}

model AvatarE {
  id       String  @id @default(uuid())
  type     String
  fileName String? @map("file_name")
  avatar   Bytes
}

model CourseSelection {
  unique String   @id @default(uuid())
  date   DateTime @default(now())
}

// model Blob {}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
